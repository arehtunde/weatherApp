{"version":3,"sources":["result.js"],"names":["Object","defineProperty","exports","value","setDaily","setHourly","setAir","setCurrentWeather","setCurrentTemp","setHeader","wrapper","document","querySelector","classList","add","headerTitle","setAttribute","innerHTML","searchInput","style","width","borderRadius","button","remove","borderTop","currentData","location","input","trim","currentTemp","createElement","append","date","Date","observation_time","showDate","toLocaleDateString","weekday","year","month","day","showTime","toLocaleTimeString","hour","minute","concat","Math","round","temp","weather_code","state","country","current","feels_like","dewpoint","humidity","baro_pressure","visibility","wind_speed","cloud_cover","precipitation","moon_phase","airVerdict","verdict","Good","Moderate","Unhealthy for sensitive groups","Unhealthy","Very Unhealthy","Hazardous","airData","air","epa_aqi","epa_health_concern","hourlyData","hourly","hourlyTime","precipitation_probability","dailyData","daily","dailyDate","max","min"],"mappings":"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","file":"result.js","sourcesContent":["const wrapper = document.querySelector('.wrapper');\n\nconst setHeader = () => {\n  const header = document.querySelector('.header');\n  header.classList.add('header2');\n\n  // set title\n  const headerTitle = document.querySelector('#header_title');\n  headerTitle.setAttribute('class', 'page_title');\n  headerTitle.innerHTML = `\n  <a href=\"index.html\" class=\"header_link\">WF</a>`;\n\n  // set search container\n  const search = document.querySelector('#search');\n  search.setAttribute('class', 'query');\n\n  // set input box\n  const searchInput = document.querySelector('.search_input');\n  searchInput.style.width = '90%';\n  searchInput.style.borderRadius = '5px 0 0 5px';\n\n  // modifying button\n  const button = document.querySelector('.btn');\n  button.classList.remove('btn1');\n  button.classList.add('btn2');\n  button.innerHTML = `\n  <i class=\"fas fa-search-location\"></i>`;\n\n  // set footer\n  const footer = document.querySelector('.foot');\n  footer.style.borderTop = '2px solid #011b33';\n};\n\nconst setCurrentTemp = (currentData, location) => {\n  const inputfield = document.querySelector('.search_input');\n  const input = inputfield.value.trim();\n\n  // create card for current temp\n  const currentTemp = document.createElement('div');\n  currentTemp.classList.add('currenttemp');\n  wrapper.append(currentTemp);\n\n  // set date\n  const date = new Date(currentData.observation_time.value);\n  const options = {\n    weekday: 'short',\n    year: '2-digit',\n    month: 'short',\n    day: '2-digit',\n  };\n\n  const time = {\n    hour: '2-digit',\n    minute: '2-digit',\n  };\n\n  const showDate = date.toLocaleDateString([], options);\n  const showTime = date.toLocaleTimeString([], time);\n\n  // set content\n  currentTemp.innerHTML = `\n    <div class=\"holder\">\n      <div class=\"currenttemp_detail\">\n        <p class=\"date\">${showDate}</p>\n        <p>as of ${showTime}</p>\n        <p class=\"temp\">${Math.round(currentData.temp.value)}°</p>\n      </div>\n      <div class=\"currenttemp_description\">\n        <p class=\"descp\">${currentData.weather_code.value}</p>\n        <img src=\"app/icons/${currentData.weather_code.value}.svg\" alt=\"${currentData.weather_code.value}\">\n      </div>\n    </div>\n    <p class=\"location\"><i class=\"fas fa-map-marker-alt\"></i><span class=\"value\">${input}, ${location.state}, ${location.country} Weather</span></p>\n  `;\n};\n\nconst setCurrentWeather = (currentData, location) => {\n  // create card for current weather\n  const current = document.createElement('div');\n  current.classList.add('currentweather');\n  wrapper.append(current);\n  current.innerHTML = `\n    <div class=\"currentweather_detail\">\n      <h3 class=\"title\">Current Weather in ${location.state}</h3>\n      <p class=\"feel\"><span class=\"feel_value\">${Math.round(currentData.feels_like.value)}°</span></p>\n      <span class=\"feel_text\">Feels like</span>\n    </div>\n    <div class=\"currentweather_data\">\n      <ul class=\"currentdata\">\n        <li class=\"currentdata_list\">\n          <i class=\"fas fa-tint\"></i>\n          <span class=\"prop\">Dew Point</span>\n          <span class=\"value\">${Math.round(currentData.dewpoint.value)}°</span>\n        </li>\n        <li class=\"currentdata_list\">\n          <i class=\"fas fa-tint\"></i>\n          <span class=\"prop\">Humidity</span>\n          <span class=\"value\">${Math.round(currentData.humidity.value)}%</span>\n        </li>\n        <li class=\"currentdata_list\">\n          <i class=\"fas fa-compress-arrows-alt\"></i>\n          <span class=\"prop\">Pressure</span>\n          <span class=\"value\">${Math.round(currentData.baro_pressure.value)}</span>\n          <span>hPa</span>\n        </li>\n        <li class=\"currentdata_list\">\n          <i class=\"fas fa-eye\"></i>\n          <span class=\"prop\">Visibility</span>\n          <span class=\"value\">${Math.round(currentData.visibility.value)}</span>\n          <span>km</span>\n        </li>\n        <li class=\"currentdata_list\">\n          <i class=\"fas fa-wind\"></i>\n          <span class=\"prop\">Wind</span>\n          <span class=\"value\">${Math.round(currentData.wind_speed.value)}</span>\n          <span>m/s</span>\n        </li>\n        <li class=\"currentdata_list\">\n          <i class=\"fas fa-cloud\"></i>\n          <span class=\"prop\">Cloud Cover</span>\n          <span class=\"value\">${Math.round(currentData.cloud_cover.value)}%</span>\n        </li>\n        <li class=\"currentdata_list\">\n          <i class=\"fas fa-bolt\"></i>\n          <span class=\"prop\">Precipitation</span>\n          <span class=\"value\">${Math.round(currentData.precipitation.value)}</span>\n          <span>mm/hr</span>\n        </li>\n        <li class=\"currentdata_list\">\n          <i class=\"fas fa-moon\"></i>\n          <span class=\"prop\">Moon Phase</span>\n          <span class=\"value\">${currentData.moon_phase.value}</span>\n        </li>\n      </ul>\n    </div>\n  `;\n};\n\nconst airVerdict = (verdict) => {\n  const verdicts = {\n    Good: 'No health implications',\n    Moderate: 'Some pollutants may slightly affect very few hypersensitive individuals',\n    'Unhealthy for sensitive groups': 'Healthy people may experience slight irritations and sensitive individuals will be slightly affected to a larger extent',\n    Unhealthy: 'Sensitive individuals will experience more serious conditions. The hearts and respiratory systems of healthy people may be affected',\n    'Very Unhealthy': 'Healthy people will commonly show symptoms. People with respiratory or heart diseases will be significantly affected and will experience reduced endurance in activities',\n    Hazardous: 'Healthy people will experience reduced endurance in activities and may also show noticeably strong symptoms. Other illnesses may be triggered in healthy people. Elders and the sick should remain indoors and avoid exercise. Healthy individuals should avoid outdoor activities',\n  };\n  return verdicts[verdict];\n};\n\nconst setAir = (airData) => {\n  // create card for air quality\n  const air = document.createElement('div');\n  air.classList.add('air');\n  wrapper.append(air);\n  air.innerHTML = `\n    <h3 class=\"air_title\">Air Quality Index</h3>\n    <div class=\"air_detail\">\n      <div class=\"airvalue\">${Math.round(airData.epa_aqi.value)}</div>\n      <div class=\"airtext\">\n        <h4 class=\"airtext_verdict\">${airData.epa_health_concern.value}</h4>\n        <p class=\"airtext_expand\">${airVerdict(airData.epa_health_concern.value)}</p>\n      </div>\n    </div>\n    <button class=\"btn3 nextSee\">See Details</button>\n  `;\n};\n\nconst setHourly = (hourlyData) => {\n  // create card for hourly weather\n  const hourly = document.createElement('div');\n  hourly.classList.add('common');\n  wrapper.append(hourly);\n\n  // set time\n  const showTime = (hourlyTime) => {\n    const time = new Date(hourlyTime);\n    const options = {\n      hour: '2-digit',\n      minute: '2-digit',\n    };\n    return time.toLocaleTimeString([], options);\n  };\n\n  // set content\n  hourly.innerHTML = `\n    <h3>Hourly Forecast</h3>\n    <div class=\"common_holder\">\n      <div class=\"common-data\">\n        <span class=\"now\">Now</span>\n        <span class=\"temp\">${Math.round(hourlyData[0].temp.value)}°</span>\n        <img src=\"app/icons/${hourlyData[0].weather_code.value}.svg\" alt=\"${hourlyData[0].weather_code.value}\">\n        <span class=\"precp\"><i class=\"fas fa-bolt\"></i>${Math.round(hourlyData[0].precipitation_probability.value)}%</span>\n      </div>\n      <div class=\"common-data\">\n        <span class=\"time\">${showTime(hourlyData[1].observation_time.value)}</span>\n        <span class=\"temp\">${Math.round(hourlyData[1].temp.value)}°</span>\n        <img src=\"app/icons/${hourlyData[1].weather_code.value}.svg\" alt=\"${hourlyData[1].weather_code.value}\">\n        <span class=\"precp\"><i class=\"fas fa-bolt\"></i>${Math.round(hourlyData[1].precipitation_probability.value)}%</span>\n      </div>\n      <div class=\"common-data\">\n        <span class=\"time\">${showTime(hourlyData[2].observation_time.value)}</span>\n        <span class=\"temp\">${Math.round(hourlyData[2].temp.value)}°</span>\n        <img src=\"app/icons/${hourlyData[2].weather_code.value}.svg\" alt=\"\">\n        <span class=\"precp\"><i class=\"fas fa-bolt\"></i>${Math.round(hourlyData[2].precipitation_probability.value)}%</span>\n      </div>\n      <div class=\"common-data\">\n        <span class=\"time\">${showTime(hourlyData[3].observation_time.value)}</span>\n        <span class=\"temp\">${Math.round(hourlyData[3].temp.value)}°</span>\n        <img src=\"app/icons/${hourlyData[3].weather_code.value}.svg\" alt=\"\">\n        <span class=\"precp\"><i class=\"fas fa-bolt\"></i>${Math.round(hourlyData[3].precipitation_probability.value)}%</span>\n      </div>\n      <div class=\"common-data\">\n        <span class=\"time\">${showTime(hourlyData[4].observation_time.value)}</span>\n        <span class=\"temp\">${Math.round(hourlyData[4].temp.value)}°</span>\n        <img src=\"app/icons/${hourlyData[4].weather_code.value}.svg\" alt=\"\">\n        <span class=\"precp\"><i class=\"fas fa-bolt\"></i>${Math.round(hourlyData[4].precipitation_probability.value)}%</span>\n      </div>\n    </div>\n    <button class=\"btn3 next24\">Next 24 Hours</button>\n  `;\n};\n\nconst setDaily = (dailyData) => {\n  // create card for daily weather\n  const daily = document.createElement('div');\n  daily.classList.add('common');\n  wrapper.append(daily);\n\n  // set date\n  const showDate = (dailyDate) => {\n    const date = new Date(dailyDate);\n    const options = {\n      weekday: 'short',\n      day: '2-digit',\n    };\n    return date.toLocaleDateString([], options);\n  };\n\n  // set content\n  daily.innerHTML = `\n    <h3>Daily Forecast</h3>\n    <div class=\"common_holder\">\n      <div class=\"common-data\">\n        <span class=\"now\">Today</span>\n        <span class=\"temp\">${Math.round(dailyData[0].temp[1].max.value)}°</span>\n        <span class=\"temp-min\">${Math.round(dailyData[0].temp[0].min.value)}°</span>\n        <img src=\"app/icons/${dailyData[0].weather_code.value}.svg\" alt=\"\">\n        <span class=\"precp\"><i class=\"fas fa-bolt\"></i>${Math.round(dailyData[0].precipitation_probability.value)}%</span>\n      </div>\n      <div class=\"common-data\">\n        <span class=\"day\">${showDate(dailyData[1].observation_time.value)}</span>\n        <span class=\"temp\">${Math.round(dailyData[1].temp[1].max.value)}°</span>\n        <span class=\"temp-min\">${Math.round(dailyData[1].temp[0].min.value)}°</span>\n        <img src=\"app/icons/${dailyData[1].weather_code.value}.svg\" alt=\"\">\n        <span class=\"precp\"><i class=\"fas fa-bolt\"></i>${Math.round(dailyData[1].precipitation_probability.value)}%</span>\n      </div>\n      <div class=\"common-data\">\n        <span class=\"day\">${showDate(dailyData[2].observation_time.value)}</span>\n        <span class=\"temp\">${Math.round(dailyData[2].temp[1].max.value)}°</span>\n        <span class=\"temp-min\">${Math.round(dailyData[2].temp[0].min.value)}°</span>\n        <img src=\"app/icons/${dailyData[2].weather_code.value}.svg\" alt=\"\">\n        <span class=\"precp\"><i class=\"fas fa-bolt\"></i>${Math.round(dailyData[2].precipitation_probability.value)}%</span>\n      </div>\n      <div class=\"common-data\">\n        <span class=\"day\">${showDate(dailyData[3].observation_time.value)}</span>\n        <span class=\"temp\">${Math.round(dailyData[3].temp[1].max.value)}°</span>\n        <span class=\"temp-min\">${Math.round(dailyData[3].temp[0].min.value)}°</span>\n        <img src=\"app/icons/${dailyData[3].weather_code.value}.svg\" alt=\"\">\n        <span class=\"precp\"><i class=\"fas fa-bolt\"></i>${Math.round(dailyData[3].precipitation_probability.value)}%</span>\n      </div>\n      <div class=\"common-data\">\n        <span class=\"day\">${showDate(dailyData[4].observation_time.value)}</span>\n        <span class=\"temp\">${Math.round(dailyData[4].temp[1].max.value)}°</span>\n        <span class=\"temp-min\">${Math.round(dailyData[4].temp[0].min.value)}°</span>\n        <img src=\"app/icons/${dailyData[4].weather_code.value}.svg\" alt=\"\">\n        <span class=\"precp\"><i class=\"fas fa-bolt\"></i>${Math.round(dailyData[4].precipitation_probability.value)}%</span>\n      </div>\n    </div>\n    <button class=\"btn3 next10\">Next 10 Days</button>\n`;\n};\n\nexport {\n  setHeader, setCurrentTemp, setCurrentWeather, setAir, setHourly, setDaily,\n};\n"]}