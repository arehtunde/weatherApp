{"version":3,"sources":["weather.js"],"names":["_result","require","_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","len","length","arr2","Symbol","iterator","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","err","isArray","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","error","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","main","document","querySelector","errorInfo","createElement","append","getCoord","_ref","regeneratorRuntime","mark","_callee","inputfield","input","encodedInput","coordUrl","fetchCoord","response","data","coord","output","fields","currentWeatherUrl","hourlyFields","startTime","endTime","hourlyWeatherUrl","dailyFields","startDate","endDate","dailyWeatherUrl","_yield$Promise$all","_yield$Promise$all2","currentResponse","hourlyResponse","dailyResponse","_yield$Promise$all3","_yield$Promise$all4","currentData","hourlyData","dailyData","wrap","_context","prev","trim","encodeURI","concat","fetch","sent","json","results","geometry","components","console","log","lat","lng","Date","setHours","getHours","toISOString","setDate","getDate","all","setCurrentTemp","setCurrentWeather","setHourly","setDaily","render","t0","innerHTML","stop","button","addEventListener"],"mappings":"AAAA,aAAA,IAAAA,QAAAC,QAAA,eAIA,SAASC,eAAeC,EAAKC,GAAK,OAAOC,gBAAgBF,IAAQG,sBAAsBH,EAAKC,IAAMG,4BAA4BJ,EAAKC,IAAMI,mBAEzI,SAASA,mBAAqB,MAAM,IAAIC,UAAU,6IAElD,SAASF,4BAA4BG,EAAGC,GAAU,GAAKD,EAAL,CAAgB,GAAiB,iBAANA,EAAgB,OAAOE,kBAAkBF,EAAGC,GAAS,IAAIE,EAAIC,OAAOC,UAAUC,SAASC,KAAKP,GAAGQ,MAAM,GAAI,GAAiE,MAAnD,WAANL,GAAkBH,EAAES,cAAaN,EAAIH,EAAES,YAAYC,MAAgB,QAANP,GAAqB,QAANA,EAAoBQ,MAAMC,KAAKZ,GAAc,cAANG,GAAqB,2CAA2CU,KAAKV,GAAWD,kBAAkBF,EAAGC,QAAzG,GAE7S,SAASC,kBAAkBT,EAAKqB,IAAkB,MAAPA,GAAeA,EAAMrB,EAAIsB,UAAQD,EAAMrB,EAAIsB,QAAQ,IAAK,IAAIrB,EAAI,EAAGsB,EAAO,IAAIL,MAAMG,GAAMpB,EAAIoB,EAAKpB,IAAOsB,EAAKtB,GAAKD,EAAIC,GAAM,OAAOsB,EAEhL,SAASpB,sBAAsBH,EAAKC,GAAK,GAAsB,oBAAXuB,QAA4BA,OAAOC,YAAYd,OAAOX,GAAjE,CAAgF,IAAI0B,EAAO,GAAQC,GAAK,EAAUC,GAAK,EAAWC,OAAKC,EAAW,IAAM,IAAK,IAAiCC,EAA7BC,EAAKhC,EAAIwB,OAAOC,cAAmBE,GAAMI,EAAKC,EAAGC,QAAQC,QAAoBR,EAAKS,KAAKJ,EAAGK,QAAYnC,GAAKyB,EAAKJ,SAAWrB,GAA3D0B,GAAK,IAAoE,MAAOU,GAAOT,GAAK,EAAMC,EAAKQ,EAAO,QAAU,IAAWV,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAAO,QAAU,GAAIJ,EAAI,MAAMC,GAAQ,OAAOH,GAEle,SAASxB,gBAAgBF,GAAO,GAAIkB,MAAMoB,QAAQtC,GAAM,OAAOA,EAE/D,SAASuC,mBAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GAAO,IAAM,IAAIC,EAAOP,EAAIK,GAAKC,GAAUV,EAAQW,EAAKX,MAAS,MAAOY,GAAwB,YAAfN,EAAOM,GAAsBD,EAAKb,KAAQO,EAAQL,GAAiBa,QAAQR,QAAQL,GAAOc,KAAKP,EAAOC,GAE7P,SAASO,kBAAkBC,GAAM,OAAO,WAAc,IAAIC,EAAOC,KAAMC,EAAOC,UAAW,OAAO,IAAIP,SAAQ,SAAUR,EAASC,GAAU,IAAIF,EAAMY,EAAGK,MAAMJ,EAAME,GAAO,SAASZ,EAAMP,GAASG,mBAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQR,GAAU,SAASQ,EAAOP,GAAOE,mBAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASP,GAAQM,OAAMb,OAdjX,IAAM4B,KAAOC,SAASC,cAAc,SAC9BC,UAAYF,SAASG,cAAc,OACzCJ,KAAKK,OAAOF,WAEZ,IAAMG,SAAQ,WAAA,IAAAC,EAAAd,kBAAAe,mBAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAhC,EAAAiC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAA/B,mBAAAgC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAlE,MAAA,KAAA,EAAA,OAEToC,EAAaV,SAASC,cAAc,iBACpCU,EAAQD,EAAWjC,MAAMiE,OACzB9B,EAAe+B,UAAUhC,GACd,gDACA,mCACE,mBACbE,EARS,GAAA+B,OAKE,gDALF,MAAAA,OAQkBhC,EARlB,SAAAgC,OAME,mCANF,KAAAA,OAOI,oBAPJJ,EAAAC,KAAA,EAWP3B,EAAa+B,MAAMhC,GAXZ2B,EAAAlE,KAAA,GAYUwC,EAZV,KAAA,GAAA,OAYPC,EAZOyB,EAAAM,KAAAN,EAAAlE,KAAA,GAaMyC,EAASgC,OAbf,KAAA,GAAA,OAaP/B,EAbOwB,EAAAM,KAgBP7B,EAAQD,EAAKgC,QAAQ,GAAGC,SACxB/B,EAASF,EAAKgC,QAAQ,GAAGE,WAC/BC,QAAQC,IAAIlC,GAGNhC,EAAM,mCACW,gDACjBiC,EAAS,CAAC,gBAAiB,qBAAsB,OAAQ,aAAc,gBAAiB,WAAY,WAAY,aAAc,aAAc,cAAe,iBAAkB,aAAc,gBAC3LC,EAxBO,GAAAwB,OAsBU,gDAtBV,QAAAA,OAwBqC3B,EAAMoC,IAxB3C,SAAAT,OAwBsD3B,EAAMqC,IAxB5D,YAAAV,OAwB0EzB,EAxB1E,YAAAyB,OAwB2F1D,GAGlF,uDAChBmC,EAAe,CAAC,4BAA6B,OAAQ,aAAc,gBAAiB,WAAY,aAAc,iBAAkB,gBAChIC,EAAY,IAAIiC,MAChBhC,EAAU,IAAIgC,KAAKjC,IACjBkC,SAASjC,EAAQkC,WAAa,IAChCjC,EAhCO,GAAAoB,OA2BS,uDA3BT,QAAAA,OAgCmC3B,EAAMoC,IAhCzC,SAAAT,OAgCoD3B,EAAMqC,IAhC1D,6BAAAV,OAgCyFrB,EAAQmC,cAhCjG,YAAAd,OAgCyHvB,EAhCzH,YAAAuB,OAgCgJ1D,GAGxI,sDACfuC,EAAc,CAAC,4BAA6B,OAAQ,aAAc,gBAAiB,WAAY,aAAc,iBAAkB,UAAW,SAAU,gBACpJC,EAAY,IAAI6B,MAChB5B,EAAU,IAAI4B,KAAK7B,IACjBiC,QAAQhC,EAAQiC,UAAY,IAC9BhC,EAxCO,GAAAgB,OAmCQ,sDAnCR,QAAAA,OAwCiC3B,EAAMoC,IAxCvC,SAAAT,OAwCkD3B,EAAMqC,IAxCxD,6BAAAV,OAwCuFjB,EAAQ+B,cAxC/F,YAAAd,OAwCuHnB,EAxCvH,YAAAmB,OAwC6I1D,GAxC7IsD,EAAAlE,KAAA,GA0CkDgB,QAAQuE,IAAI,CACzEhB,MAAMzB,GACNyB,MAAMrB,GACNqB,MAAMjB,KA7CK,KAAA,GAAA,OAAAC,EAAAW,EAAAM,KAAAhB,EAAA1F,eAAAyF,EAAA,GA0CNE,EA1CMD,EAAA,GA0CWE,EA1CXF,EAAA,GA0C2BG,EA1C3BH,EAAA,GAAAU,EAAAlE,KAAA,GAgDsCgB,QAAQuE,IAAI,CAC7D9B,EAAgBgB,OAAQf,EAAee,OAAQd,EAAcc,SAjDlD,KAAA,GAAAb,EAAAM,EAAAM,KAAAX,EAAA/F,eAAA8F,EAAA,GAgDNE,EAhDMD,EAAA,GAgDOE,EAhDPF,EAAA,GAgDmBG,EAhDnBH,EAAA,GAmDbgB,QAAQC,IAAIf,GACZc,QAAQC,IAAId,IACZ,EAAApG,QAAA4H,gBAAe1B,EAAalB,IAC5B,EAAAhF,QAAA6H,mBAAkB3B,EAAalB,IAC/B,EAAAhF,QAAA8H,WAAU3B,IACV,EAAAnG,QAAA+H,UAAS3B,GACTa,QAAQC,IAAIxB,IACZ,EAAA1F,QAAAgI,UA1Da1B,EAAAlE,KAAA,GAAA,MAAA,KAAA,GAAAkE,EAAAC,KAAA,GAAAD,EAAA2B,GAAA3B,EAAA,MAAA,GA4DbtC,UAAUkE,UAAV,OAAAxB,OAA6BjC,EAA7B,+DA5Da,KAAA,GAAA,IAAA,MAAA,OAAA6B,EAAA6B,UAAA5D,EAAA,KAAA,CAAA,CAAA,EAAA,UAAH,OAAA,WAAA,OAAAH,EAAAR,MAAAH,KAAAE,YAAA,GAiERyE,OAAStE,SAASC,cAAc,QACtCqE,OAAOC,iBAAiB,QAASlE","file":"weather.js","sourcesContent":["import {\n  render, setCurrentTemp, setCurrentWeather, setHourly, setDaily,\n} from './result.js';\n\nconst main = document.querySelector('.main');\nconst errorInfo = document.createElement('div');\nmain.append(errorInfo);\n\nconst getCoord = async () => {\n  // geocode query parameters\n  const inputfield = document.querySelector('.search_input');\n  const input = inputfield.value.trim();\n  const encodedInput = encodeURI(input);\n  const coordApi = 'https://api.opencagedata.com/geocode/v1/json?';\n  const coordKey = '173f9f1a42c64005be22065050aa936e';\n  const coordParam = 'pretty=1&limit=1';\n  const coordUrl = `${coordApi}q=${encodedInput}&key=${coordKey}&${coordParam}`;\n\n  try {\n    const fetchCoord = fetch(coordUrl);\n    const response = await fetchCoord;\n    const data = await response.json();\n\n    // coordinates\n    const coord = data.results[0].geometry;\n    const output = data.results[0].components;\n    console.log(output);\n\n    // current weather query parameters\n    const key = 'vK6swCrrskXqnuZGn4NT7q7Aj1YuZINH';\n    const currentWeather = 'https://api.climacell.co/v3/weather/realtime?';\n    const fields = ['precipitation', 'precipitation_type', 'temp', 'feels_like', 'baro_pressure', 'humidity', 'dewpoint', 'visibility', 'moon_phase', 'cloud_cover', 'wind_direction', 'wind_speed', 'weather_code'];\n    const currentWeatherUrl = `${currentWeather}lat=${coord.lat}&lon=${coord.lng}&fields=${fields}&apikey=${key}`;\n\n    // hourly weather query parameter\n    const hourlyWeather = 'https://api.climacell.co/v3/weather/forecast/hourly?';\n    const hourlyFields = ['precipitation_probability', 'temp', 'feels_like', 'baro_pressure', 'humidity', 'wind_speed', 'wind_direction', 'weather_code'];\n    const startTime = new Date();\n    const endTime = new Date(startTime);\n    endTime.setHours(endTime.getHours() + 24);\n    const hourlyWeatherUrl = `${hourlyWeather}lat=${coord.lat}&lon=${coord.lng}&start_time=now&end_time=${endTime.toISOString()}&fields=${hourlyFields}&apikey=${key}`;\n\n    // daily weather query parameters\n    const dailyWeather = 'https://api.climacell.co/v3/weather/forecast/daily?';\n    const dailyFields = ['precipitation_probability', 'temp', 'feels_like', 'baro_pressure', 'humidity', 'wind_speed', 'wind_direction', 'sunrise', 'sunset', 'weather_code'];\n    const startDate = new Date();\n    const endDate = new Date(startDate);\n    endDate.setDate(endDate.getDate() + 10);\n    const dailyWeatherUrl = `${dailyWeather}lat=${coord.lat}&lon=${coord.lng}&start_time=now&end_time=${endDate.toISOString()}&fields=${dailyFields}&apikey=${key}`;\n\n    const [currentResponse, hourlyResponse, dailyResponse] = await Promise.all([\n      fetch(currentWeatherUrl),\n      fetch(hourlyWeatherUrl),\n      fetch(dailyWeatherUrl),\n    ]);\n\n    const [currentData, hourlyData, dailyData] = await Promise.all([\n      currentResponse.json(), hourlyResponse.json(), dailyResponse.json(),\n    ]);\n    console.log(hourlyData);\n    console.log(dailyData);\n    setCurrentTemp(currentData, output);\n    setCurrentWeather(currentData, output);\n    setHourly(hourlyData);\n    setDaily(dailyData);\n    console.log(dailyWeatherUrl);\n    render();\n  } catch (error) {\n    errorInfo.innerHTML = `<h2>${input} Not Found!</h2>\n    <p>Please Enter a valid city name</p>`;\n  }\n};\n\nconst button = document.querySelector('.btn');\nbutton.addEventListener('click', getCoord);\n"]}