{"version":3,"sources":["weather.js"],"names":["_result","_interopRequireDefault","require","obj","__esModule","default","_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","len","length","arr2","Symbol","iterator","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","err","isArray","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","error","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","main","document","querySelector","errorInfo","createElement","append","getCoord","_ref","regeneratorRuntime","mark","_callee","inputfield","input","encodedInput","coordUrl","fetchCoord","response","data","coord","fields","currentWeatherUrl","hourlyFields","startTime","endTime","hourlyWeatherUrl","dailyFields","startDate","endDate","dailyWeatherUrl","_yield$Promise$all","_yield$Promise$all2","currentResponse","hourlyResponse","dailyResponse","_yield$Promise$all3","_yield$Promise$all4","currentData","hourlyData","dailyData","wrap","_context","prev","trim","encodeURI","concat","fetch","sent","json","results","geometry","lat","lng","Date","setHours","getHours","toISOString","filter","item","setDate","getDate","all","console","log","t0","innerHTML","stop","button","addEventListener","render"],"mappings":"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","file":"weather.js","sourcesContent":["import render from './result';\n\n// initialize error page\nconst main = document.querySelector('.main');\nconst errorInfo = document.createElement('div');\nmain.append(errorInfo);\n\nconst getCoord = async () => {\n  // geocode query parameters\n  const inputfield = document.querySelector('.search_input');\n  const input = inputfield.value.trim();\n  const encodedInput = encodeURI(input);\n  const coordApi = 'https://api.opencagedata.com/geocode/v1/json?';\n  const coordKey = '173f9f1a42c64005be22065050aa936e';\n  const coordParam = 'pretty=1&limit=1';\n  const coordUrl = `${coordApi}q=${encodedInput}&key=${coordKey}&${coordParam}`;\n\n  try {\n    const fetchCoord = fetch(coordUrl);\n    const response = await fetchCoord;\n    const data = await response.json();\n\n    // coordinates\n    const coord = data.results[0].geometry;\n\n    // current weather query parameters\n    const key = 'vK6swCrrskXqnuZGn4NT7q7Aj1YuZINH';\n    const currentWeather = 'https://api.climacell.co/v3/weather/realtime?';\n    const fields = ['precipitation', 'precipitation_type', 'temp', 'feels_like', 'baro_pressure', 'humidity', 'wind_direction', 'wind_speed', 'weather_code'];\n    const currentWeatherUrl = `${currentWeather}lat=${coord.lat}&lon=${coord.lng}&fields=${fields}&apikey=${key}`;\n\n    // hourly weather query parameter\n    const hourlyWeather = 'https://api.climacell.co/v3/weather/forecast/hourly?';\n    const hourlyFields = [...fields, 'precipitation_probability'];\n    const startTime = new Date();\n    const endTime = new Date(startTime);\n    endTime.setHours(endTime.getHours() + 6);\n    const hourlyWeatherUrl = `${hourlyWeather}lat=${coord.lat}&lon=${coord.lng}&start_time=now&end_time=${endTime.toISOString()}&fields=${hourlyFields}&apikey=${key}`;\n\n    // daily weather query parameters\n    const dailyWeather = 'https://api.climacell.co/v3/weather/forecast/daily?';\n    // const dailyFields = fields.splice(0, 1);\n    const removeItem = 'precipitation_type';\n    const dailyFields = fields.filter((item) => item !== removeItem);\n    const startDate = new Date();\n    const endDate = new Date(startDate);\n    endDate.setDate(endDate.getDate() + 6);\n    const dailyWeatherUrl = `${dailyWeather}lat=${coord.lat}&lon=${coord.lng}&start_time=now&end_time=${endDate.toISOString()}&fields=${dailyFields}&apikey=${key}`;\n\n    const [currentResponse, hourlyResponse, dailyResponse] = await Promise.all([\n      fetch(currentWeatherUrl),\n      fetch(hourlyWeatherUrl),\n      fetch(dailyWeatherUrl),\n    ]);\n\n    const [currentData, hourlyData, dailyData] = await Promise.all([\n      currentResponse.json(), hourlyResponse.json(), dailyResponse.json(),\n    ]);\n    console.log(currentData);\n    console.log(hourlyData);\n    console.log(dailyData);\n  } catch (error) {\n    errorInfo.innerHTML = `<h2>${input} Not Found!</h2>\n    <p>Please Enter a valid city name</p>`;\n  }\n};\nconsole.log(getCoord());\n\nconst button = document.querySelector('.btn');\nbutton.addEventListener('click', render);\n"]}